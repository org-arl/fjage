import org.apache.tools.ant.taskdefs.condition.Os

plugins {
  id 'java-library'
  id 'groovy'
  id 'maven-publish'
  id 'signing'
}

defaultTasks 'jar'

archivesBaseName = 'fjage'
group = 'com.github.org-arl'
version = new File(projectDir, 'VERSION').text.trim()

// get git commit
def stdout = new ByteArrayOutputStream()
exec {
  commandLine 'git', 'describe', '--always', '--abbrev=8', '--match', 'NOT A TAG', '--dirty=*'
  standardOutput = stdout;
}
def commit = "$stdout".replace('\n','')

// check if npm exists
def npmcmd = Os.isFamily(Os.FAMILY_WINDOWS) ? "npm.cmd" : "npm"
boolean npmExists = false
try {
  def npmproc = "$npmcmd -v".execute()
  npmproc.waitForOrKill(3000)
  npmExists = npmproc.exitValue() == 0
} catch (IOException ignored){}

targetCompatibility = 1.8
sourceCompatibility = 1.8

repositories {
  mavenCentral()
}

dependencies {
  api 'org.codehaus.groovy:groovy:2.5.23'
  api 'org.jline:jline:3.30.4'
  api 'org.apache.commons:commons-lang3:3.17.0'
  api 'commons-io:commons-io:2.19.0'
  api 'uk.com.robust-it:cloning:1.9.12'
  api 'org.eclipse.jetty:jetty-server:9.4.57.v20241219'
  api 'org.eclipse.jetty:jetty-servlet:9.4.57.v20241219'
  api 'org.eclipse.jetty:jetty-rewrite:9.4.57.v20241219'
  api 'org.eclipse.jetty.websocket:websocket-server:9.4.57.v20241219'
  api 'com.google.code.gson:gson:2.13.0'
  api 'com.fazecast:jSerialComm:2.9.3'
  testImplementation 'junit:junit:4.13.2'
  testImplementation 'net.jodah:concurrentunit:0.4.6'
}

compileJava {
  options.compilerArgs << "-Xlint:all"
  options.compilerArgs << "-Xlint:-options"
  options.compilerArgs << "-Xlint:-removal"
}

compileTestJava {
  options.compilerArgs << "-Xlint:all"
  options.compilerArgs << "-Xlint:-options"
}

compileGroovy {
  options.compilerArgs << "-Xlint:all"
  options.compilerArgs << "-Xlint:-options"
}

tasks.register('buildjs') {
  inputs.files fileTree('gateways/js/src').include('**/*.js'), "gateways/js/package.json"
  outputs.dir "gateways/js/dist"
  doLast {
    if (npmExists) {
      exec {
        workingDir 'gateways/js'
        executable npmcmd
        args System.getenv('CI') != null ? 'ci' : "install"
        errorOutput = new ByteArrayOutputStream()
        standardOutput = new ByteArrayOutputStream()
      }
      exec {
        workingDir 'gateways/js'
        executable npmcmd
        args 'run', 'build'
      }
    } else if (file('gateways/js/dist/fjage.js').exists()) {
      if (!gradle.taskGraph.hasTask(":javadoc")) { // only log if not building javadoc
        project.logger.lifecycle('npm not found. Using cached fjage.js build')
      }
    } else {
      if (!gradle.taskGraph.hasTask(":javadoc")) { // only log if not building javadoc
        project.logger.lifecycle('Not bundling fjage.js. WebShell will not work.')
      }
    }
  }
}

tasks.register('jsdoc', Exec) {
  doFirst{
    if (!npmExists) {
      throw new GradleException("npm not found. Cannot generate JSDoc.")
    }
  }
  workingDir 'gateways/js'
  executable npmcmd
  args = ['run', 'docs']
}

tasks.register('updatexterm') {
  doFirst{
    if (!npmExists) {
      throw new GradleException("npm not found. Cannot update xterm.")
    }
  }
  doLast {
    // create package.json with `{}` if it does not exist
    if (!file('package.json').exists()) {
      file('package.json').text = '{}'
    }
    exec {
      workingDir '.'
      executable npmcmd
      args 'install', '@xterm/xterm@5.5.0', '@xterm/addon-attach@0.11.0', '@xterm/addon-fit@0.10.0', '@xterm/addon-web-links@0.11.0'
    }
    copy {
      from(['node_modules/@xterm/addon-web-links/lib', 'node_modules/@xterm/addon-attach/lib', 'node_modules/@xterm/addon-fit/lib', 'node_modules/@xterm/xterm/lib']) {
        include '*.js'
      }
      from('node_modules/@xterm/xterm/css') {
        include 'xterm.css'
      }
      into 'src/main/resources/org/arl/fjage/web/shell'
    }
    delete "node_modules", "package.json", "package-lock.json"
  }
}

jar {
  manifest {
    attributes (
        "Build-Owner": System.getenv().USER ?: "fjage",
        "Build-Timestamp": new Date().format('d-MM-yyyy_HH:mm:ss'),
        "Build-Version": "${project.version}/${commit}")
  }
}

processResources {
  exclude '**/readme.md'
  with copySpec {
    from { tasks.named('buildjs').get()?.outputs?.files?.asFileTree?.matching {include 'dist/fjage.js'} ?: [] }
    into('org/arl/fjage/web/shell')
  }
}

test {
  dependsOn 'buildjs'
  systemProperties project.properties.subMap(["manualJSTest"])
  systemProperties project.properties.subMap(["manualPyTest"])
  systemProperties project.properties.subMap(["manualCTest"])
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full"
  }
}

javadoc {
  options.addStringOption('Xdoclint:none', '-quiet')
  doLast {
    mkdir 'docs/javadoc'
    copy {
      from javadoc.destinationDir
      into 'docs/javadoc'
    }
  }
}

////// tasks for MavenCentral deployment

java {
  withJavadocJar()
  withSourcesJar()
}

publishing {
  if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
    repositories {
      maven {
        def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        credentials {
          username = sonatypeUsername
          password = sonatypePassword
        }
      }
    }
  }
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifactId = 'fjage'
      pom {
        name = 'fjage'
        packaging = 'jar'
        description = 'Framework for Java and Groovy Agents'
        url = 'http://github.com/org-arl/fjage'
        licenses {
          license {
            name = '3-clause BSD License'
            url = 'http://github.com/org-arl/fjage/blob/master/LICENSE.txt'
            distribution = 'repo'
          }
        }
        developers {
          developer {
            id = 'mchitre'
            name = 'Mandar Chitre'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/org-arl/fjage.git'
          developerConnection = 'scm:git:git@github.com:org-arl/fjage.git'
          url = 'http://github.com/org-arl/fjage'
        }
      }
    }
  }
}

signing {
  sign publishing.publications.mavenJava
}